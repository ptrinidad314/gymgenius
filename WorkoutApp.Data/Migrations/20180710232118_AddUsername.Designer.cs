// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using WorkoutApp.Data;
using WorkoutApp.Domain;

namespace WorkoutApp.Data.Migrations
{
    [DbContext(typeof(WorkoutContext))]
    [Migration("20180710232118_AddUsername")]
    partial class AddUsername
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WorkoutApp.Domain.AccountRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Complete");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("AccountRequests");
                });

            modelBuilder.Entity("WorkoutApp.Domain.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("Notes")
                        .HasMaxLength(100);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("WorkoutApp.Domain.DayExercise", b =>
                {
                    b.Property<int>("DayId");

                    b.Property<int>("ExerciseId");

                    b.HasKey("DayId", "ExerciseId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("DayExercises");
                });

            modelBuilder.Entity("WorkoutApp.Domain.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("WorkoutApp.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AADObjectId")
                        .IsRequired()
                        .HasMaxLength(38);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<int>("Height");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WorkoutApp.Domain.Workload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DayId");

                    b.Property<int>("Distance");

                    b.Property<int>("Duration");

                    b.Property<int>("ExerciseId");

                    b.Property<string>("Notes")
                        .HasMaxLength(100);

                    b.Property<int>("Reps");

                    b.Property<int>("Sets");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Workloads");
                });

            modelBuilder.Entity("WorkoutApp.Domain.Day", b =>
                {
                    b.HasOne("WorkoutApp.Domain.User", "User")
                        .WithMany("Days")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WorkoutApp.Domain.DayExercise", b =>
                {
                    b.HasOne("WorkoutApp.Domain.Day", "Day")
                        .WithMany("DayExercises")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorkoutApp.Domain.Exercise", "Exercise")
                        .WithMany("DayExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WorkoutApp.Domain.Workload", b =>
                {
                    b.HasOne("WorkoutApp.Domain.Day", "Day")
                        .WithMany("Workloads")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorkoutApp.Domain.Exercise", "Exercise")
                        .WithMany("Workloads")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
